#!/usr/bin/env bash
# for program configuration/setup
# all commands should be able to be run multiple times and should fail
# harmlessly if required software isn't installed

# * Argument Parsing
print_option_help() {
	echo "usage: extra-setup [options] [operation]

options:
	-s or --server <true|false>
	   Whether to perform server configuration instead (default: false)

	-t or --timestamp <timestamp>
	   Optional timestamp to use for log files (to share them with post-install)

	-h or --help
	   Print this help text.

primary operations:
	all
	   Perform all configuration

	non-chroot
	   Do configuration that can't be done in a chroot and nothing else (e.g.
	   enabling systemd user services and ufw and dns).

	all_service_setup
	  Enable both user and global services

	systemd_boot_setup
	  Configure/setup systemd boot (not called by default since I use refind)

	*
	   Run any specific function
"
}

timestamp=$(date +%FT%T)
server=false
while getopts t:s:h-: opt
do
	case $opt in
		t) timestamp=$OPTARG;;
		s) server=$OPTARG;;
		-)
			if [[ $OPTARG =~ ^(arg-with-no-opts)$ ]] || \
				   [[ $OPTARG == *=* ]]; then
				OPTION=${OPTARG%%=*}
				OPTARG=${OPTARG#*=}
			else
				OPTION=$OPTARG
				# shellcheck disable=SC2124
				OPTARG=${@:$OPTIND:1}
				((OPTIND++))
			fi
			case $OPTION in
				timestamp) timestamp=$OPTARG;;
				server) server=$OPTARG;;
				help) print_option_help && exit 0;;
				*) print_option_help && exit 1;;
			esac;;
		h) print_option_help && exit 0;;
		*) print_option_help && exit 1;;
	esac
done
shift "$((OPTIND-1))"

# * Variables and Helpers
mkdir -p /tmp/build

# only necessary if not using salt to more easily see which failed
basedir="$(dirname "$(realpath "$0")")"
failure_log="$basedir"/failure_log_"$timestamp".txt

fail_echo() {
	echo "$1" | tee --append "$failure_log"
}

subsection_echo() {
	echo
	echo "** extra-setup: $*"
}

run_reporting_failure() {
	if ! "$@"; then
		fail_echo "Failed: $*"
		return 1
	fi
}

run_subsection() {
	subsection_echo "$@"
	run_reporting_failure "$@"
}

is_chroot() {
	[[ $(stat -c %d:%i /) != $(stat -c %d:%i /proc/1/root/.) ]]
}

# * Services
# ** Normal Services
service_setup() {
	local user
	user=$1
	echo "Configuring systemd services."
	systemctl enable rngd
	systemctl enable fstrim.timer
	# doesn't exist anymore
	# systemctl disable netctl
	systemctl disable NetworkManager
	systemctl mask NetworkManager
	systemctl enable connman
	systemctl disable wpa_supplicant
	systemctl mask wpa_supplicant
	systemctl enable iwd
	systemctl enable kwakd
	systemctl enable ntpd
	# tlp requires these to be masked
	systemctl mask systemd-rfkill.service systemd-rfkill.socket
	# enabled in fcron_setup
	# systemctl enable fcron
	systemctl enable ufw
	systemctl enable preload
	systemctl enable systemd-modules-load
	# printing/printer discovery
	systemctl enable cups
	systemctl enable avahi-daemon

	if $server; then
		systemctl disable optimus-manager
		systemctl mask optimus-manager
		systemctl enable sshd
	else
		systemctl enable resume@"$user"
		systemctl enable tlp
	fi
}

# ** User Services
# TODO still get dbus error with --preserve-env; need to add a version that
# doesn't expect to run as root
user_services_setup() {
	local user
	user=$1
	if ! is_chroot; then
		echo "Configuring user systemd services."
		echo "THIS IS CURRENTLY BROKEN: Run as user instead"
		# --preserve-env to avoid dbus error
		sudo --preserve-env -u "$user" systemctl --user enable --now udiskie
		sudo --preserve-env -u "$user" \
			 systemctl --user enable --now lorri.socket
		# fails and have custom run script
		sudo --preserve-env -u "$user" systemctl --user disable dunst
		# TODO emacs, mpd, and mpd-notification block login for a long time
		# starting in ~/.profile instead
		# mpd-notification service fails quickly
		# systemctl --user start mpd-notification
		# systemctl --user enable mpd-notification
		# systemctl --user start psd
		# systemctl --user enable psd
	else
		echo "In chroot. Not enabling user services."
	fi
}

# ** All Services
all_service_setup() {
	local user
	user=$1
	service_setup "$user"
	user_services_setup "$user"
}

# * rEFInd
# SEE ./boot/README.org for bootloader troubleshooting steps
refind_setup() {
	if ! mountpoint -q /boot/efi; then
		mount LABEL=SYSTEM /boot/efi
	fi
	if mountpoint -q /boot/efi; then
		echo "Configuring refind."
		# install or update refind
		refind-install
	else
		echo "ESP Partition must be mounted to run refind-install!"
		return 1
	fi
}

# * systemd-boot
# SEE ./boot/README.org for bootloader troubleshooting steps
systemd_boot_setup() {
	if ! mountpoint -q /boot/efi; then
		mount LABEL=SYSTEM /boot/efi
	fi
	# will already complain if esp not detected (so will refind)
	bootctl --esp-path=/boot/efi --boot-path=/boot install
}

# * initramfs
initramfs_setup() {
	echo "Generating initramfs."
	mkinitcpio --allpresets
}

# * Console Colors
vt_colors_setup() {
	echo "Configuring vt colors."
	local uhome
	uhome=$1
	setcolors "$uhome"/dotfiles/aesthetics/vt_colors/solarized
}

# * Font
freetype_setup() {
	echo "Configuring font setup."
	# https://gist.github.com/cryzed/e002e7057435f02cc7894b9e748c5671
	# https://wiki.archlinux.org/index.php/font_configuration
	# just uncomment export line
	# enable sub-pixel rgb rendering globally
	# 10-hinting-slight.conf already linked
	# 30-infinality-aliases requires fonts-meta-extended-lt
	cd /etc/fonts/conf.d \
		&& ln -sf /usr/share/fontconfig/conf.avail/10-sub-pixel-rgb.conf . \
		&& ln -sf /usr/share/fontconfig/conf.avail/11-lcdfilter-default.conf . \
		&& ln -sf /usr/share/fontconfig/conf.avail/30-infinality-aliases.conf .
}

# * Lambda Fortunes
lambda_txt_setup() {
	echo "Configuring fortune."
	local uhome
	uhome=$1
	cp "$uhome"/dotfiles/.data/lambda /usr/share/fortune/lambda
	strfile /usr/share/fortune/lambda
}

# * Fcron
fcron_setup() {
	echo "Configuring fcron globally."
	local uhome
	uhome=$1
	sed "s:uhome:$uhome:g" "$uhome"/dotfiles/common/sudo_fcrontab | fcrontab -
	systemctl enable fcron
}

fcron_user_setup() {
	echo "Configuring fcron for user."
	local user
	user=$1
	# could also use fcrontab -u "$user"
	sudo -u "$user" fcrontab /home/"$user"/dotfiles/common/fcrontab
}

# * UFW
# shellcheck disable=SC2120
ufw_setup() {
	local force
	force=$1
	if ! is_chroot; then
		# only do this once; don't want to alter current configuration if
		# already enabled
		if [[ -n "$force" ]] || ! ufw status | grep -q "Status: active"; then
			echo "Configuring UFW."
			# https://wiki.archlinux.org/index.php/Uncomplicated_Firewall#Basic_configuration
			ufw --force reset
			ufw default deny incoming
			# denying outgoing traffic can potentially prevent some malware from
			# working, but a lot of malware just uses http or https; having to
			# whitelist every used port for minimal benefit would be too tedious
			ufw default allow outgoing
			if $server; then
				# local ssh
				ufw allow from 192.168.0.0/16 to any port 22
				# local ollama
				ufw allow from 192.168.0.0/16 to any port 11434
				# https
				ufw allow from 192.168.0.0/16 to any port 443
				# open webui
				ufw allow from 192.168.0.0/16 to any port 3000
				# kobold
				ufw allow from 192.168.0.0/16 to any port 5001
			fi
			ufw enable
		fi
	else
		echo "In chroot. Not enabling UFW."
	fi
}

# * Transmission
# transmission user created when installing packae
transmission_setup() {
	echo "Configuring transmission."
	local user
	user=$1
	# make download directory and watch directory
	mkdir -p /home/transmission/{Downloads,torrents}
	# may chown as "$USER":transmission in future (first suggestion on archwiki)
	# but this setup works fine currently
	chown -R transmission:transmission /home/transmission
	# for config file and other directories (e.g. resume)
	chown -R transmission:transmission /var/lib/transmission
	# give transmission user and group rwx permissions
	chmod -R 770 /home/transmission
	# add user to transmission group
	gpasswd -a "$user" transmission
}

# * DNS
# not doing this until after reboot because will break DNS resolution unless can
# start unbound and dnscrypt-proxy successfully
dns_setup() {
	echo "Configuring DNS."
	# unbound
	# don't need to manually create unbound user
	curl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache
	# needed for auto-trust-anchor-file
	chown root:unbound /etc/unbound
	chmod 775 /etc/unbound
	# only do this once; hence chattr +i; don't want to alter resolv.conf if has
	# changed
	echo -e "nameserver ::1
nameserver 127.0.0.1
noptions edns0 single-request-reopen" \
		 > /etc/resolv.conf
	chattr +i /etc/resolv.conf
	systemctl enable unbound
	systemctl restart unbound

	# https://wiki.archlinux.org/index.php/unbound#Testing_validation
	# https://wiki.archlinux.org/index.php/Resolv.conf#Testing
	# to test if dnscrypt is working, need to stop all proxies
	# https://wiki.archlinux.org/index.php/DNSCrypt#dnscrypt_runs_with_root_privileges
	if ! id -u dnscrypt-user &>/dev/null; then
		useradd --system --home-dir /var/dnscrypt --create-home \
				--shell /sbin/nologin dnscrypt-user
	fi
	systemctl enable dnscrypt-proxy.socket
	systemctl restart dnscrypt-proxy.socket
}

# * Ranger Devicons
# no AUR package
ranger_devicons_setup() {
	echo "Installing ranger devicons."
	local user uhome devicons_dir
	user=$1
	uhome=/home/"$user"
	devicons_dir="$uhome"/.config/ranger/plugins/ranger_devicons
	if [[ ! -d $devicons_dir ]]; then
		sudo -u "$user" mkdir -p "$uhome"/.config/ranger/plugins
		sudo -u "$user" \
			 git clone https://github.com/alexanderjeurissen/ranger_devicons \
			"$devicons_dir"
	fi
}

# * Udiskie
udiskie_setup() {
	# does not exist by default; udiskies uses for mounting
	mkdir -p /media
}

# * Connman
connman_setup() {
	connmanctl enable wifi
}

# * Arkenfox
arkenfox_setup() {
	local user uhome
	user=$1
	uhome=/home/"$user"
	if pgrep firefox > /dev/null; then
		echo "Please close firefox before running arkenfox's cleaner" >&2
		return 1
	fi
	# arkenfox-updater can detect profile, but cleaner must be run in profile
	# directory
	cd "$uhome"/.mozilla/firefox/"$user".normal || return 1
	arkenfox-updater
	arkenfox-cleaner
}

# * Pywalfox
pywalfox_setup() {
	echo "Running pywalfox install."
	pywalfox install
}

# * QMK
qmk_setup() {
	local user
	user=$1
	qmk_dir=/home/"$user"/qmk_firmware
	if [[ ! -d $qmk_dir ]]; then
		sudo -u "$user" git clone -b "feature/noctuid-kyria" \
			https://github.com/noctuid/qmk_firmware "$qmk_dir"
	fi
	sudo -u "$user" qmk setup --yes || return 1
	sudo -u "$user" qmk config user.keyboard=splitkb/kyria/rev3 || return 1
	sudo -u "$user" qmk config user.keymap=noctuid || return 1
}

# * LLM
ollama_setup() {
	mkdir -p /home/ollama/{models,tmp}
	chown -R ollama:ollama /home/ollama
	chmod 777 /home/ollama/tmp
}

# * All
all() {
	user=$1
	uhome=/home/"$user"

	if ! is_chroot; then
		systemctl daemon-reload
	else
		echo "In chroot. Not calling systemctl daemon-reload."
	fi

	run_subsection service_setup "$user"
	run_subsection user_services_setup "$user"
	run_subsection refind_setup
	run_subsection initramfs_setup
	run_subsection vt_colors_setup "$uhome"
	run_subsection freetype_setup
	run_subsection lambda_txt_setup "$uhome"
	run_subsection fcron_setup "$uhome"
	run_subsection fcron_user_setup "$user"
	run_subsection ufw_setup
	run_subsection transmission_setup "$user"
	# run_subsection dns_setup
	run_subsection ranger_devicons_setup "$user"
	run_subsection udiskie_setup
	run_subsection arkenfox_setup "$user"
	run_subsection pywalfox_setup
	run_subsection qmk_setup "$user"
	run_subsection ollama_setup
}

# * Non-chroot
non_chroot() {
	user=$1
	systemctl daemon-reload
	run_subsection user_services_setup "$user"
	run_subsection connman_setup
	run_subsection ufw_setup
	run_subsection dns_setup
}

# * Main
"$@"

# Base sxhkdrc
# Limitations:
# - chaining isn't perfect (use xchainkeys instead)
# - can only use level 1 (unshifted) key for prefix (can use keys in layer with
#   modifier though)
# - "hyper" acts as super even if a different modifier:
#   https://github.com/baskerville/sxhkd/issues/175; using "mod2" instead

# NOTE: using both mod2 (f24 on thumb key as hyper) /and/ super+control
# - super+control is norm (kanata, QMK, and kaleidoscope)
# - f24/hyper is for backup config that uses xcape (which can only make a single
#   key dual-role)

# Unbound keys:
# - u
# - {
# - alt combinations

# * Reloading
# reload keyboad layout (if screw it up and can't type)
any + F11
	rldkbd

# make sxhkd reload its configuration files:
{mod2,super+control} + period
	pkill -USR1 -x sxhkd

# * General Global Hotkeys
# ** Brightness
XF86MonBrightness{Down,Up}
	bright {-,+} 10
	# xbacklight {-dec,-inc} 10

{mod2,super+control} + n
	bright 1

{mod2,super+control} + e
	bright 100

# ** Media/Volume
XF86Audio{Lower,Raise}Volume
	pactl set-sink-volume @DEFAULT_SINK@ {-,+}5%

XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle
	# amixer -qD pulse sset Master toggle

# tidal shows as chromium
XF86AudioPlay
	playerctl --player=spotify,chromium,mopidy,mpd play-pause

# play/pause last used player (requires playerctl daemon)
{mod2,super+control} + o
	playerctl play-pause --ignore-player=spotify,mopidy,mpd

# next/prev
# any because prev is accessed with shift
any + XF86Audio{Prev,Next}
	playerctl --player=spotify,chromium,mpd {previous,next}

{mod2,super+control} + z
	playerctl --player=spotify,chromium,mopidy,mpd shuffle Toggle

{mod,super+control} + y
	echo async no-osd screenshot | socat - /tmp/mpvsocket

# ** Screenshots
# ~/bin/screenshot
Print
	screenshot

{mod2,super+control} + q
	screenshot select

{mod2,super+control} + w
	screenshot current_window

# ** Program hotkeys
{mod2,super+control} + f
	vfox

# backspace since can only type space on one side on external keyboard;
# backspace is in mirrored position
{mod2,super+control} + {space,BackSpace}
	rofi -show run

# open [t]ag app
{mod2,super+control} + t
	hc_open_app_for_tag

# TODO get this to work
{mod2,super+control} + (
	dyn_emacsclient -c

# use latest good emacs configuration
{mod2,super+control} + alt + t
	emacs --stable

# demote errors for each org source block; for debugging errors that are
# localized to a single section without losing all configuration from following
# sections or needing to run Emacs with a stable configuration
{mod2,super+control} + alt + d
	emacs --with-demoted-errors

# {mod2,super+control} + b
# 	dyn_emacsclient -ce "(noct:with-q-to-exit (toggle-frame-fullscreen) (counsel-buku))"

{mod2,super+control} + l
	lockscreen

super + b
	xtoggle polybar "$(get_wm)"

{mod2,super+control} + alt + w
	walrandom

# ** Clicks and Mouse Movement
{mod2,super+control} + h
	warpd --hint

{mod2,super+control} + j
	warpd --hint2

# TODO clicks don't work when modifiers held
# {mod2,super+control} + alt + c
# 	click middle
# 	# ~/bin/click

# regain focus from browser media
{mod2,super+control} + a
	click left

# banish mouse to bottom left
{mod2,super+control} + b
	click 0 90000

# ** Terminals, Dropdowns, etc.
{mod2,super+control} + Return
	wezterm

{mod2,super+control+shift} + Return
	kitty

{mod2,super+control} + s
	dropdown wezterm connect unix
	# dropdown dyn_emacsclient -c -e "(let (display-buffer-alist) (vterm) (delete-other-windows))"

{mod2,super+control} + c
	dropdown -n longcommands wezterm connect --workspace longcommands unix

{mod2,super+control} + semicolon
	dropdown -n vtermlongcommands dyn_emacsclient -ce '(noct-with-reuse-window (noct-vterm-select-or-create "long"))'

# test key
{mod2,super+control} + S
	tdrop --debug -a current

# unfortunately ranger does not have wezterm image preview support, and ueberzug
# does not work with wezterm multiplexing
{mod2,super+control} + r
	max_dropdown -n ranger wezterm start --workspace ranger zsh -c "ranger; zsh -i"

{mod2,super+control} + d
	max_dropdown -n dirvish dyn_emacsclient --socket-name=dirvish -ce "(noct-dirvish-frame)"

{mod2,super+control} + p
	max_dropdown -n proced dyn_emacsclient -ce "(noct-with-q-to-exit (proced) (delete-other-windows))"

# [v]ideo
{mod2,super+control} + v
	dropmpgo

{mod2,super+control} + alt + v
	dropmplast

# use separate server to avoid binding del to delete the whole buffer in normal server
{mod2,super+control} + i
	dyn_emacsclient --socket-name=everywhere --eval "(emacs-everywhere)"

# [k]alc
{mod2,super+control} + k
	dropdown -n calc dyn_emacsclient -ce "(progn (calc) (delete-other-windows))"

{mod2,super+control} + slash
	max_dropdown -n woman dyn_emacsclient -ce "(noct-with-global-completing-read (woman))"

# {mod2,super+control} + m
# 	some mpd client

{mod2,super+control} + alt + m
	max_dropdown -n mu4e dyn_emacsclient -ce "(mu4e)"

{mod2,super+control} + g
	gnus

{mod2,super+control} + apostrophe
	dyn_emacsclient -ce "(noct-ement-connect-or-list-rooms)"

{mod2,super+control} + x
	dyn_emacsclient -ce "(noct-xprop)"

{mod2,super+control} + X
	dyn_emacsclient -ce '(noct-xwininfo)'

# other commands
super + space
	max_dropdown -n shell-menu dyn_emacsclient --socket-name=shell-menu -ce '(noct-shell-menu)'

# ** Dunst
{mod2,super+control} + comma
	dunstctl close-all

{mod2,super+control} + alt + comma
	dunstctl history-pop

# ** Modifiers
# NOTE: this is the old method for making my trackpoint buttons act as modifier keys
# I'm now using kanata instead so they can be dual-role keys
# see rldkbd


# buttons should not simulate dual-role keys (won't work consistently and will
# result in unwanted keypresses)
# http://www.linuxforums.org/forum/hardware-peripherals/169773-solved-map-mouse-button-modifier-key.html
# {_,super +, super + shift + } button51
# 	xdotool keydown super

# {_,super +, super + shift + } @button51
# 	xdotool keyup super

# {_,shift +, super +, alt +}{_,shift +, super +, alt +}{_,shift +, super +, alt +} button50
# 	xdotool keydown super alt

# {_,shift +, super +, alt +}{_,shift +, super +, alt +}{_,shift +, super +, alt +} @button50
# 	xdotool keyup super alt
